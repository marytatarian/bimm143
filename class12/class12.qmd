---
title: "class12"
author: "Mary Tatarian"
format: gfm
editor: visual
editor_options: 
  chunk_output_type: inline
---

# 1. Bioconductor and DESeq2 setup

```{r}
#install.packages("BiocManager")
#BiocManager::install()
#BiocManager::install("DESeq2")
library(BiocManager)
library(DESeq2)
```

# 2. Import countData and colData

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
head(metadata)
```

**Q1.** How many genes are in this dataset?

```{r}
nrow(counts)
```

**Q2.** How many 'control' cell lines do we have?

```{r}
control_cell_lines <- table(metadata$dex)['control']
control_cell_lines
```

# 3. Toy differential gene expression

**Q3.** How would you make the above code in either approach more robust?

-   see below

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowMeans( control.counts ) 
head(control.mean)
```

**Q4.** Follow the same procedure for the `treated` samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called `treated.mean`)

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.mean <- rowSums( counts[ ,treated$id] )/4
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
colSums(meancounts) 
```

**Q5 (a).** Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts[,1],meancounts[,2], xlab="Control", ylab="Treated")
```

**Q5 (b).**You could also use the **ggplot2** package to make this figure producing the plot below. What **geom\_?()** function would you use for this plot?

-   use `geom_point`

```{r}
library(ggplot2)
ggplot()+
  aes(control.mean, treated.mean)+
  geom_point()
```

**Q6.** Try plotting both axes on a log scale. What is the argument to **plot()** that allows you to do this?

-   log

```{r}
plot(log(control.mean),log(treated.mean), xlab="log Control", ylab="log Mean")
```

```{r}
log2(5/20)
```

to calculate the log2 of the fold change between treated and control

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/
                          meancounts$control.mean)
```

**Q7.** What is the purpose of the `arr.ind` argument in the **which()** function call above? Why would we then take the first column of the output and need to call the **unique()** function?

-   The arr.ind=TRUE argument will clause which() to return both the row and column indices (i.e. positions) where there are TRUE values. In this case this will tell us which genes (rows) and samples (columns) have zero counts. Calling **unique()** will ensure we dont count any row twice if it has zer entries in both samples. Ask Marcos to discuss and demo this further

removing 0 values

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

overexpressed and underexpressed genes

**Q8.** Using the `up.ind` vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

-   250

```{r}
up.ind <- mycounts$log2fc > 2
table(up.ind)
```

**Q9.** Using the `down.ind` vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

-   367

```{r}
down.ind <- mycounts$log2fc < (-2)
table (down.ind)
```

**Q10.** Do you trust these results? Why or why not?

we did all of our analysis based on fold change, but fold change can be large without being statistically significant, which is determined based on p-value. we also havent performed any tests to see if the differences are significant. These results in the current form are likely to be very misleading.

# 4. DESeq2 analysis

```{r}
library(DESeq2)
citation("DESeq2")
```

importing data and generating specific object

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

## DESeq analysis

```{r}
dds <- DESeq(dds)
```

getting results

```{r}
res <- results(dds)
res
```

summary of `res`

```{r}
summary(res)
```

The results function contains a number of arguments to customize the results table. By default the argument `alpha` is set to 0.1. If the adjusted p value cutoff will be a value other than 0.1, alpha should be set to that value:

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

# 6. Data Visualization

```{r}
plot(res$log2FoldChange, -log10(res$padj), ylab="-Log(P-value)", xlab="Log2(FoldChange)")
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)

```

```{r}
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```
